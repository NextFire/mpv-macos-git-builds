name: CI

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout mpv-player/mpv
        uses: actions/checkout@v3
        with:
          repository: "mpv-player/mpv"
          fetch-depth: 0
      - name: Get versions
        id: versions
        run: |
          echo "COMMIT_SHA=$(git log -n1 --format='%h')" >> $GITHUB_OUTPUT
          echo "MPV_VERSION_SH=$(./version.sh)" >> $GITHUB_OUTPUT
      - name: Get last build version
        id: last_build
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
          releases-only: true
        continue-on-error: true
      - name: Cancel run if last build is up to date
        if: (github.ref == 'refs/heads/main') && endsWith(steps.last_build.outputs.tag, steps.versions.outputs.MPV_VERSION_SH)
        uses: andymckay/cancel-action@0.3
      - name: Install dependencies
        run: |
          brew update
          brew install --overwrite python@3.10 python@3.11
          brew install --overwrite meson luajit mujs
          brew install --overwrite --head ffmpeg libplacebo
      - name: Build mpv
        run: |
          meson setup build
          meson compile -C build
          meson install -C build
      - name: --version output
        id: mpv_version
        run: |
          echo 'MPV_VERSION<<EOF' >> $GITHUB_OUTPUT
          ./build/mpv --version >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Bundle mpv
        run: |
          # workaround for osxbundle.py
          install_name_tool -change @loader_path/libbrotlicommon.1.dylib /usr/local/opt/brotli/lib/libbrotlicommon.1.dylib /usr/local/opt/brotli/lib/libbrotlidec.1.dylib
          install_name_tool -change @loader_path/libbrotlicommon.1.dylib /usr/local/opt/brotli/lib/libbrotlicommon.1.dylib /usr/local/opt/brotli/lib/libbrotlienc.1.dylib
          ./TOOLS/osxbundle.py build/mpv
      - name: tar bundle
        run: tar cvf mpv-${{ steps.versions.outputs.MPV_VERSION_SH }}.tar mpv.app
        working-directory: build
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/mpv-${{ steps.versions.outputs.MPV_VERSION_SH }}.tar
    outputs:
      COMMIT_SHA: ${{ steps.versions.outputs.COMMIT_SHA }}
      MPV_VERSION_SH: ${{ steps.versions.outputs.MPV_VERSION_SH }}
      MPV_VERSION: ${{ steps.mpv_version.outputs.MPV_VERSION }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
      - name: Release body and date
        env:
          COMMIT_SHA: ${{ needs.build.outputs.COMMIT_SHA }}
          MPV_VERSION: ${{ needs.build.outputs.MPV_VERSION }}
        run: |
          echo "Bump to mpv-player/mpv@$COMMIT_SHA" > body.md
          echo '```' >> body.md
          echo "$MPV_VERSION" >> body.md
          echo '```' >> body.md
      - name: Get today date
        id: date
        run: echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: mpv-${{ needs.build.outputs.MPV_VERSION_SH }}
          name: ${{ steps.date.outputs.DATE }}
          body_path: body.md
          files: mpv-${{ needs.build.outputs.MPV_VERSION_SH }}.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-tap:
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout NextFire/homebrew-tap
        uses: actions/checkout@v3
        with:
          repository: "NextFire/homebrew-tap"
          token: ${{ secrets.TOKEN }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
      - name: Update cask
        env:
          MPV_VERSION_SH: ${{ needs.build.outputs.MPV_VERSION_SH }}
        run: |
          BUILD_SHA=$(shasum -a 256 mpv-$MPV_VERSION_SH.tar | cut -d ' ' -f 1)
          sed -i "s/version .*/version \"$MPV_VERSION_SH\"/; s/sha256 .*/sha256 \"$BUILD_SHA\"/" Casks/mpv-git.rb
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add Casks/mpv-git.rb
          git commit -m "[CI] Update mpv to $MPV_VERSION_SH"
          git push
